{"name":"Load a Dataverse Table","description":"","version":"1.0","culture":"en-US","modifiedTime":"2022-05-25T19:37:08.9051151+00:00","pbi:mashup":{"fastCombine":true,"allowNativeQueries":false,"queriesMetadata":{"OptionSetTable":{"queryId":"f9d4792a-5782-4406-859e-0ab20322cc67","queryName":"OptionSetTable","queryGroupId":"723313bf-b560-4084-85ab-7152850b1b1b"},"Instructions":{"queryId":"1133a374-3c60-4ac8-8112-4543eedd2cef","queryName":"Instructions","queryGroupId":"3ae233e4-ad08-4252-88f6-c2f011198603","loadEnabled":true},"DataLakeEnvironmentURL":{"queryId":"1cbcf236-a5f2-4b32-9b54-321fbb0b67e1","queryName":"DataLakeEnvironmentURL","queryGroupId":"3ae233e4-ad08-4252-88f6-c2f011198603"},"fnEnhancedDataverseTableFromDataLake":{"queryId":"770a6839-7359-439d-972b-329812abcd13","queryName":"fnEnhancedDataverseTableFromDataLake","queryGroupId":"3ae233e4-ad08-4252-88f6-c2f011198603"},"account":{"queryId":"08459626-ee2b-4fb2-b572-eb8082ad86af","queryName":"account","queryGroupId":"85e2bd2d-ab5e-413c-abc8-f061b93b535e"},"account - No name fields (compare performance)":{"queryId":"de271e36-c40c-4327-856d-d4614cfc22a6","queryName":"account - No name fields (compare performance)","queryGroupId":"85e2bd2d-ab5e-413c-abc8-f061b93b535e"}},"document":"section Section1;\r\nshared OptionSetTable = let\n    // The Data Lake (Data Storage) Environment/Blob connected to Dataverse.\n    Source = AzureStorage.DataLake(DataLakeEnvironmentURL),\n\n    // Filter on the Metadata files only.\n    #\"Filtered EntityMetadata.json\" = Table.SelectRows(Source, each Text.Contains([Name], \"EntityMetadata.json\")),\n\n    #\"Renamed columns\" = Table.RenameColumns(#\"Filtered EntityMetadata.json\", {{\"Name\", \"Table Name\"}}),\n\n    // The table name is required to resolve Global Option Sets for downstream processes. Table name isn't available in the json file for Global Option Set type.\n    #\"Get Table Name from File Name\" = Table.ReplaceValue(#\"Renamed columns\", \"-EntityMetadata.json\", \"\", Replacer.ReplaceText, {\"Table Name\"}),\n\n    #\"Parse JSON to Table\" = Table.AddColumn(#\"Get Table Name from File Name\", \"Transform file\", each Record.ToTable(Json.Document([Content]))),\n    #\"Expanded table column\" = Table.ExpandTableColumn(#\"Parse JSON to Table\", \"Transform file\", {\"Name\", \"Value\"}, {\"Metadata Type\", \"Value\"} ),\n    #\"Remove columns related to source files\" = Table.RemoveColumns(#\"Expanded table column\", {\"Content\", \"Extension\", \"Date accessed\", \"Date created\", \"Attributes\", \"Folder Path\"}),\n\n    // Remove the metadata types not related to Option Sets.\n    #\"Filtered Option Sets\" = Table.SelectRows(#\"Remove columns related to source files\", each ([Metadata Type] <> \"AttributeMetadata\" and [Metadata Type] <> \"TargetMetadata\")),\n\n    #\"Expanded List to Records\" = Table.ExpandListColumn(#\"Filtered Option Sets\", \"Value\"),\n    #\"Expanded Records to Fields\" = Table.ExpandRecordColumn(#\"Expanded List to Records\", \"Value\", {\"State\", \"Status\", \"Option\", \"OptionSetName\", \"IsUserLocalizedLabel\", \"LocalizedLabelLanguageCode\", \"LocalizedLabel\"}, {\"State\", \"Status\", \"Option\", \"OptionSetName\", \"IsUserLocalizedLabel\", \"LocalizedLabelLanguageCode\", \"Option Field Label\"}),\n\n    // Put the integer fields in a single column.\n    #\"Combined Option Id\" = Table.TransformColumnTypes(Table.AddColumn(#\"Expanded Records to Fields\", \"Option Id\", each if [Metadata Type] = \"StateMetadata\" then [State] else if [Metadata Type] = \"StatusMetadata\" then [Status] else [Option]), {{\"Option Id\", Int64.Type}}),\n    \n    // Option Id Logical column to join with True/False columns\n    #\"Added Option Id Logical\" = Table.TransformColumnTypes(Table.AddColumn(#\"Combined Option Id\", \"Option Id Logical\", each if [Option Id] = 0 then false\n      else if [Option Id] = 1 then true\n      else null), {{\"Option Id Logical\", type logical}}),\n\n    // Put the field names in a single column.\n    #\"Combined Field Name\" = Table.TransformColumnTypes(Table.AddColumn(#\"Added Option Id Logical\", \"Field Name\", each if [Metadata Type] = \"StateMetadata\" then \"statecode\" else if [Metadata Type] = \"StatusMetadata\" then \"statuscode\" else [OptionSetName]), {{\"Field Name\", type text}}),\n\n    #\"Remove duplicate columns\" = Table.RemoveColumns(#\"Combined Field Name\", {\"Option\", \"OptionSetName\"}),\n    #\"Assign every column a type\" = Table.TransformColumnTypes(#\"Remove duplicate columns\", {{\"Option Field Label\", type text}, {\"Metadata Type\", type text}, {\"State\", Int64.Type}, {\"Status\", Int64.Type}, {\"IsUserLocalizedLabel\", type logical}, {\"LocalizedLabelLanguageCode\", type text}})\nin\n    #\"Assign every column a type\";\r\nshared Instructions = let\r\n  Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"bcwxCoAwEAXRq3xSi0ewUbsUIliFFEtcMBg3ElfQ2yvW1vMY50wvygV3Pgs6UoKllTGNFlGgC2OgQhu/pja+cqZNMazIgv6ibU98oAGFkE/Rr//u2sIzi0ZKh/H+AQ==\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Instructions = _t])\r\nin\r\n  Source;\r\n[Description = \"https://{Data Storage Account Name}.dfs.core.windows.net/{Dataverse Container Name}\"]\r\nshared DataLakeEnvironmentURL = \"https://YOURSTORAGE.dfs.core.windows.net/YOURDATAVERSEFOLDER\" meta [IsParameterQuery = true, IsParameterQueryRequired = false, Type = type text];\r\nshared fnEnhancedDataverseTableFromDataLake = let \n  fnEnhancedDataverseTableFromDataLake = (DataverseTableName as text, UserFieldsToExtend, DataverseTable as table ) as table => \n    let\n      // Define the Option Set table\n      OptionSetTableLocal = Table.Buffer(Table.SelectRows(OptionSetTable, each ([Table Name] = DataverseTableName))),\n      \n      // List of Option Columns; add the \"name\" column to each one\n      UserListTextToList = Text.Split(UserFieldsToExtend, \",\"),\n      UserListValidFieldsOnly = if Text.Length(UserFieldsToExtend) > 0\n        then\n          List.Intersect({Table.ColumnNames(DataverseTable), UserListTextToList})\n        else \n          Table.ColumnNames(DataverseTable),\n      OptionColumns = List.Intersect({UserListValidFieldsOnly, List.Distinct(Table.Column(OptionSetTableLocal,\"Field Name\"))}),\n      CountColumns = List.Count(OptionColumns),\n\n      // Identify Boolean fields to provide the correct join to Option Sets\n      DataverseTableSchema = Table.Schema(DataverseTable),\n      BooleanColumns = \n          Table.Column(Table.SelectRows(DataverseTableSchema, each ([TypeName] = \"Logical.Type\")),\"Name\"),\n\n      // Recursive function that joins each option column with the Option Set table and returns many {optionfield}name columns. Function called in subsequent step.\n      fnTableJoinRecursion = (CombinedTable, i, CountColumnsLocal) as table =>\n        let\n          UpdatedTable = if List.Contains( BooleanColumns, OptionColumns{i} )\n            then\n              Table.NestedJoin(\n                  CombinedTable, \n                  {OptionColumns{i}}, \n                  Table.SelectRows(OptionSetTableLocal , each ([Field Name] = OptionColumns{i})), \n                  {\"Option Id Logical\"}, \n                  OptionColumns{i} & \"Table\", \n                  JoinKind.LeftOuter)\n            else\n              Table.NestedJoin(\n                  CombinedTable, \n                  {OptionColumns{i}}, \n                  Table.SelectRows(OptionSetTableLocal , each ([Field Name] = OptionColumns{i})), \n                  {\"Option Id\"}, \n                  OptionColumns{i} & \"Table\", \n                  JoinKind.LeftOuter),\n          UpdatedTableExpanded = Table.ExpandTableColumn(UpdatedTable, OptionColumns{i} & \"Table\", {\"Option Field Label\"}, {OptionColumns{i} & \"name\"}),\n          CheckComplete = \n            if i < (CountColumnsLocal - 1) then @fnTableJoinRecursion(UpdatedTableExpanded, i + 1, CountColumnsLocal)\n            else UpdatedTableExpanded\n        in\n          CheckComplete,\n\n      // If there are option columns, run the recursive function to add the \"name\" columns, otherwise return the table\n      DataverseTableWithNameFields = if CountColumns > 0 then fnTableJoinRecursion(DataverseTable, 0 , CountColumns) else DataverseTable\n    in\n      DataverseTableWithNameFields\nin\n  fnEnhancedDataverseTableFromDataLake;\r\nshared account = let\n  DataverseTableName = \"account\",\n  // Optional List of Comma Delimited fields (eg \"statecode,statuscode\"). Blank returns all Option Set name Fields\n  ListOfFieldsToExtend = \"\",\n\n  // Begin section that shouldn't be modified -->\n  Source = Cdm.Contents(AzureStorage.DataLake(DataLakeEnvironmentURL, [HierarchicalNavigation = true])),\n  Navigation = Source{[Id = \"model.json\"]}[Data],\n  DataverseTable = Table.Buffer(Navigation{[Name = DataverseTableName]}[Data]),\n  DataverseTableExtended = fnEnhancedDataverseTableFromDataLake( DataverseTableName, ListOfFieldsToExtend, DataverseTable)\n  // <-- End section that shouldn't be modified\n\nin\n  DataverseTableExtended;\r\nshared #\"account - No name fields (compare performance)\" = let\n  DataverseTableName = \"account\",\n\n  // Begin section that shouldn't be modified -->\n  Source = Cdm.Contents(AzureStorage.DataLake(DataLakeEnvironmentURL, [HierarchicalNavigation = true])),\n  Navigation = Source{[Id = \"model.json\"]}[Data],\n  DataverseTable = Table.Buffer(Navigation{[Name = DataverseTableName]}[Data])\n  // <-- End section that shouldn't be modified\n\nin\n  DataverseTable;\r\n"},"annotations":[{"name":"pbi:QueryGroups","value":"[{\"id\":\"723313bf-b560-4084-85ab-7152850b1b1b\",\"name\":\"OptionSetTable Function\",\"description\":\"\",\"parentId\":null,\"order\":2},{\"id\":\"3ae233e4-ad08-4252-88f6-c2f011198603\",\"name\":\"Parameters and Functions\",\"description\":\"\",\"parentId\":null,\"order\":0},{\"id\":\"85e2bd2d-ab5e-413c-abc8-f061b93b535e\",\"name\":\"Examples\",\"description\":\"\",\"parentId\":null,\"order\":1}]"}],"entities":[{"$type":"LocalEntity","name":"Instructions","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"Instructions.csv"},"attributes":[{"name":"Instructions","dataType":"string"}]}]}